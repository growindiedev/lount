{"version":3,"sources":["ApolloProvider.tsx","context/auth.tsx","queries.ts","context/message.tsx","pages/home/Message.tsx","pages/home/Messages.tsx","pages/home/Users.tsx","pages/home/Home.tsx","pages/Register.tsx","pages/Login.tsx","Navbar.tsx","theme.ts","util/DynamicRoute.tsx","App.tsx","index.tsx"],"names":["httpLink","createHttpLink","uri","setContext","_","headers","token","localStorage","getItem","authorization","concat","host","window","location","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","props","user","LOGIN_USER","gql","REGISTER_USER","GET_USERS","GET_MESSAGES","SEND_MESSAGE","REACT_TO_MESSAGE","NEW_MESSAGE","NEW_REACTION","MessageStateContext","createContext","undefined","MessageDispatchContext","messageReducer","state","action","usersCopy","userIndex","payload","username","message","messages","reaction","type","users","findIndex","u","map","selected","reactions","newUser","latestMessage","userCopy","messageIndex","m","uuid","messagesCopy","reactionsCopy","reactionIndex","r","Error","MessageProvider","children","useReducer","dispatch","Provider","value","React","memo","useMessageState","useContext","useMessageDispatch","AuthStateContext","AuthDispatchContext","decodedToken","jwtDecode","expiresAt","Date","exp","removeItem","console","log","authReducer","setItem","clear","AuthProvider","useAuthState","useAuthDispatch","Message","sent","from","received","useState","showPopover","setShowPopover","reactionIcons","Set","content","useMutation","onError","err","onCompleted","data","reactToMessage","reactionButton","placement","isOpen","aria-label","onClick","color","isRound","bg","_focus","boxShadow","icon","display","px","py","alignItems","width","borderRadius","variables","react","_hover","fontSize","mb","mx","my","ml","classNames","mr","justifyContent","label","moment","createdAt","format","hasArrow","position","bgColor","length","right","bottom","p","Messages","selectedUser","find","useLazyQuery","getMessages","messagesLoading","loading","messagesData","sendMessage","useEffect","selectedChatMarkup","inputMarkup","selectAFriend","formik","useFormik","initialValues","messageContent","onSubmit","a","resetForm","trim","to","fontWeight","overflowY","height","flexDirection","form","handleSubmit","mt","as","name","onChange","handleChange","values","area-label","placeholder","focusBorderColor","borderColor","isDisabled","Users","usersMarkup","useQuery","getUsers","src","imageUrl","size","isTruncated","Home","messageDispatch","useSubscription","messageData","messageError","error","reactionData","reactionError","newMessage","otherUser","newReaction","Register","errors","setErrors","history","useHistory","toast","useToast","update","__","push","title","description","status","duration","isClosable","graphQLErrors","extensions","registerUser","email","password","confirmPassword","spacing","pt","margin","w","rounded","isRequired","_active","disabled","textAlign","Login","login","href","loginUser","Navbar","logout","align","alt","variant","theme","extendTheme","styles","global","body","bgGradient","DynamicRoute","authenticated","guest","component","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c44b9ab.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider as Provider,\n  createHttpLink,\n  split\n} from '@apollo/client'\n\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\n\nlet httpLink = createHttpLink({\n  uri: '/graphql/',\n})\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('chat-token')\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nhttpLink = authLink.concat(httpLink)\n\nconst host = window.location.host\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://${host}/graphql/`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      Authorization: `Bearer ${localStorage.getItem('chat-token')}`,\n    },\n  },\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink\n)\n\n\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n})\n\nexport default function ApolloProvider(props: any) {\n  return <Provider client={client} {...props} />\n}\n\n// psql --host=lount.c3kyyudg0o1h.us-east-2.rds.amazonaws.com --port=5432 --username=jarryingnut --password --dbname=postgres","import React, { createContext, useReducer, useContext } from 'react'\nimport jwtDecode from 'jwt-decode';\n\n\ntype Action = {type: 'LOGIN', payload: {token: string}} | {type: 'LOGOUT'}\ntype Dispatch = (action: Action) => void\ntype User = {username?: string, id?: string, exp?: number } | null\n\n\ntype AuthProviderProps = {children: React.ReactNode}\n\nconst AuthStateContext = createContext<{ state: { user: User} ; dispatch: Dispatch } | undefined>(undefined)\nconst AuthDispatchContext = createContext<Dispatch | any>(undefined)\n\n\nlet user: User \nconst token = localStorage.getItem('chat-token')\n\n\nif(token) {\n    const decodedToken: { exp: number, username: string, id: string  } = jwtDecode(token) \n    const expiresAt = new Date(decodedToken.exp * 1000)\n\n    if (new Date() > expiresAt) {\n        localStorage.removeItem('chat-token')\n      } else {\n        user =  decodedToken\n      }\n    } else console.log('No token found')\n\n\nconst authReducer = (state: any, action: Action) => {\n\n    switch (action.type) {\n      case 'LOGIN':\n        localStorage.setItem('chat-token', action.payload.token)\n        return {\n          ...state,\n          user: action.payload,\n        }\n      case 'LOGOUT':\n        localStorage.clear()\n        return {\n          ...state,\n          user: null,\n        }\n      default:\n        throw new Error(`Unknown action type`)\n      }\n  }\n\n    export const AuthProvider = ({ children }: AuthProviderProps) => {\n      const [state, dispatch] = useReducer(authReducer, { user })\n    \n      \n    return (\n      <AuthDispatchContext.Provider value={dispatch}>\n        <AuthStateContext.Provider value={state}>\n          {children}\n        </AuthStateContext.Provider>\n      </AuthDispatchContext.Provider>\n    )\n  }\n\n   \nexport const useAuthState = () => useContext(AuthStateContext)\nexport const useAuthDispatch = () => useContext(AuthDispatchContext) \n\n\n","import { gql } from '@apollo/client'\n\nexport const LOGIN_USER = gql`\n  query login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      username\n      email\n      createdAt\n      token\n      \n    }\n  }\n`\n\nexport const REGISTER_USER = gql`\nmutation register(\n  $username: String!\n  $email: String!\n  $password: String!\n  $confirmPassword: String!\n  $imageUrl: String\n) {\n  register(\n    username: $username\n    email: $email\n    password: $password\n    confirmPassword: $confirmPassword\n    imageUrl: $imageUrl\n  ) {\n    username\n    email\n    createdAt\n  }\n}\n`\n\nexport const GET_USERS = gql`\nquery getUsers {\n  getUsers {\n    username\n    createdAt\n    token\n    imageUrl\n    latestMessage {\n        uuid\n        from\n        to\n        content\n        createdAt\n      }\n  }\n}\n`\n\nexport const GET_MESSAGES = gql`\n  query getMessages($from: String!) {\n    getMessages(from: $from) {\n      uuid\n      from\n      to\n      content\n      createdAt\n      reactions {\n        uuid\n        content\n      }\n    }\n  }\n`\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage($to: String!, $content: String!) {\n    sendMessage(to: $to, content: $content) {\n      uuid\n      from\n      to\n      content\n      createdAt\n    }\n  }\n`\n\nexport const REACT_TO_MESSAGE = gql`\n  mutation reactToMessage($uuid: String!, $content: String!) {\n    reactToMessage(uuid: $uuid, content: $content) {\n      uuid\n    }\n  }\n`\n\nexport const NEW_MESSAGE = gql`\nsubscription newMessage {\n  newMessage {\n    uuid\n    from\n    to\n    content\n    createdAt\n  }\n}\n`\n\nexport const NEW_REACTION = gql`\nsubscription newReaction {\n  newReaction {\n    uuid\n    content\n    message {\n      uuid\n      from\n      to\n    }\n  }\n}\n`","import React, { createContext, useReducer, useContext } from 'react'\nimport {getMessages} from '../generated/getMessages'\n\ntype Message_ = {\n  uuid: string,\n  from: string,\n  to: string,\n  content: string,\n  createdAt: string\n  reactions?: string[]\n}\n\n//type Action = {type: 'SET_USERS', payload: {users: { username: string, message: Message_, messages: getMessages }}} | {type: 'SET_USER_MESSAGES', payload: {username: string, messages: getMessages}} | {type: 'SET_SELECTED_USER', payload: string} | {type: 'ADD_MESSAGE', payload: any}\ntype Action = {type: 'SET_USERS' | 'SET_USER_MESSAGES' | 'SET_SELECTED_USER' | 'ADD_MESSAGE' | 'ADD_REACTION', payload: any}\n//{ username?: string, message?: Message_,  messages?: getMessages, reactions?: any}} \n\ntype Dispatch = (action: Action ) => void\ntype AuthProviderProps = {children: React.ReactNode}\ntype User = { username: string, messages: getMessages, selected: boolean}\ntype State = { users: User[]}\n\nconst MessageStateContext = createContext<{ state: State ; dispatch: Dispatch } | undefined>(undefined)\nconst MessageDispatchContext = createContext<Dispatch | any>(undefined)\n\n\nconst messageReducer = (state: any , action: Action) => {\n  let usersCopy, userIndex\n  const { username, message, messages, reaction } = action.payload\n\n    switch (action.type) {\n      case 'SET_USERS':\n        \n      return {\n        ...state,\n        users: action.payload,\n      }\n\n    case 'SET_USER_MESSAGES':\n      //const { username, messages } = action.payload\n      usersCopy = [...state.users]\n      userIndex = usersCopy.findIndex((u) => u.username === username)\n      usersCopy[userIndex] = { ...usersCopy[userIndex], messages }\n\n      return {\n        ...state,\n        users: usersCopy,\n      }\n\n    case 'SET_SELECTED_USER':\n      usersCopy = state.users.map((user: {username: string}) => ({\n        ...user,\n        selected: user.username === action.payload,\n      }))\n\n      return {\n        ...state,\n        users: usersCopy,\n      }\n\n    case 'ADD_MESSAGE':\n        usersCopy = [...state.users]\n        userIndex = usersCopy.findIndex((u) => u.username === username)\n\n        message.reactions = []\n\n        let newUser = {\n          ...usersCopy[userIndex],\n          messages: usersCopy[userIndex].messages\n            ? [message, ...usersCopy[userIndex].messages]\n            : null,\n          latestMessage: message,\n        }\n        usersCopy[userIndex] = newUser\n        return {\n          ...state,\n          users: usersCopy,\n        }\n\n    case 'ADD_REACTION':\n      usersCopy = [...state.users]\n\n      userIndex = usersCopy.findIndex((u) => u.username === username)\n\n      // Make a shallow copy of user\n      let userCopy = { ...usersCopy[userIndex] }\n\n      // Find the index of the message that this reaction pertains to\n      const messageIndex = userCopy.messages?.findIndex(\n        (m: Message_) => m.uuid === reaction.message.uuid\n      )\n\n      if (messageIndex > -1) {\n        // Make a shallow copy of user messages\n        let messagesCopy = [...userCopy.messages]\n\n        // Make a shallow copy of user message reactions\n        let reactionsCopy = [...messagesCopy[messageIndex]?.reactions]\n\n        const reactionIndex = reactionsCopy.findIndex(\n          (r) => r.uuid === reaction.uuid\n        )\n\n        if (reactionIndex > -1) {\n          // Reaction exists, update it\n          reactionsCopy[reactionIndex] = reaction\n        } else {\n          // New Reaction, add it\n          reactionsCopy = [...reactionsCopy, reaction]\n        }\n\n        messagesCopy[messageIndex] = {\n          ...messagesCopy[messageIndex],\n          reactions: reactionsCopy,\n        }\n\n        userCopy = { ...userCopy, messages: messagesCopy }\n        usersCopy[userIndex] = userCopy\n      }\n\n      return {\n        ...state,\n        users: usersCopy,\n      }\n\n    default:\n      throw new Error(`Unknown action type`)\n  }\n}\n\n\nconst MessageProvider = ({ children }: AuthProviderProps) => {\n  const [state, dispatch] = useReducer(messageReducer, { users: null })\n\n  return (\n    <MessageDispatchContext.Provider value={dispatch}>\n      <MessageStateContext.Provider value={state}>\n        {children}\n      </MessageStateContext.Provider>\n    </MessageDispatchContext.Provider>\n  )\n}\n\nexport default React.memo(React.memo(MessageProvider))\n\nexport const useMessageState = () => useContext(MessageStateContext)\nexport const useMessageDispatch = () => useContext(MessageDispatchContext)\n","import React, {useState} from 'react'\nimport moment from 'moment'\nimport classNames from 'classnames'\nimport { useAuthState } from '../../context/auth'\nimport { \n  Flex, Text, Box, Tooltip, IconButton, HStack,  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Button, \n  \n} from '@chakra-ui/react'\nimport { useMutation } from '@apollo/client'\nimport { REACT_TO_MESSAGE } from '../../queries'\nimport {HiOutlineEmojiHappy} from 'react-icons/hi'\n\n\n\ntype Message_ = {\n    uuid: string,\n    from: string,\n    to: string,\n    content: string,\n    createdAt: string\n    reactions: any\n}\n\ntype props = {\n    message: Message_\n}\n\n function Message({ message }: props) {\n  const reactions = ['❤️', '😆', '😯', '😢', '😡', '👍', '👎']\n  const state: any = useAuthState()\n  const user = state?.user\n  const sent = message.from === user.username\n  const received = !sent\n  const [showPopover, setShowPopover] = useState(false)\n  const reactionIcons = [...new Set(message.reactions && message.reactions.map((r: any) => r.content))]\n\n  const [reactToMessage] = useMutation(REACT_TO_MESSAGE, {\n    onError: (err) => console.log(err),\n    onCompleted: (data) => setShowPopover(false),\n  })\n\n  const react =  (reaction: string) => {\n     reactToMessage({ variables: { uuid: message.uuid, content: reaction } })\n    console.log(reaction)\n    setShowPopover(!showPopover)\n  }\n\n \n  const reactionButton = \n  <Popover placement=\"top\" isOpen={showPopover} >\n  <PopoverTrigger >\n      <IconButton  aria-label=\"reactionButton\" onClick={() => setShowPopover(!showPopover)} color=\"gray.300\" isRound bg=\"whiteAlpha.500\" _focus={{boxShadow: 'none'}} icon={<HiOutlineEmojiHappy/>} />\n  </PopoverTrigger>\n  <PopoverContent display=\"flex\" px=\"0\" py=\"1\"  alignItems=\"center\"  width=\"40\" borderRadius=\"3xl\" _focus={{boxShadow: 'none'}}>\n        {reactions.map((reaction) => (\n              <Button\n                display=\"contents\"\n                key={reaction}\n                onClick={() => react(reaction)}\n                _hover={{fontSize: '2xl'}}\n              >\n                {`${reaction}  `}\n              </Button>\n            ))} \n  </PopoverContent>\n</Popover>\n\n\n  return (\n    <Flex width=\"100%\" mb=\"5\" >\n        <HStack mx=\"5\" my=\"5\" mb=\"0\"  ml={classNames({'auto': sent})} mr={classNames({'auto': received})}  justifyContent=\"flex-start\">\n        {sent && reactionButton}\n        <Tooltip placement=\"auto\" m=\"0\" label={moment(message.createdAt).format('MMMM DD, YYYY @ h:mm a')} fontSize=\"sm\" hasArrow bg=\"gray.300\" >\n        <Box py=\"1.5\" px=\"3\"  borderRadius=\"2xl\" position=\"relative\" bgColor={classNames({'blue.400': sent, 'green.400':received})}  >\n          {message.reactions.length > 0 && (\n            <Box position=\"absolute\" right=\"-10px\" bottom=\"-20px\" bg=\"gray.50\" p=\"1\" borderRadius=\"3xl\" fontSize=\"xs\" color=\"gray.500\">\n              {reactionIcons} {message.reactions.length}\n            </Box>\n          )}\n        <Text  color=\"whiteAlpha.900\" key=\"message.uuid\" >{message.content}</Text>\n        </Box>\n        </Tooltip>\n        {received && reactionButton}\n        </HStack>\n    </Flex>\n  )\n}\n\nexport default React.memo(Message)","import React, { ReactElement, useEffect } from 'react'\nimport {  useLazyQuery, useMutation } from '@apollo/client'\nimport { GET_MESSAGES, SEND_MESSAGE } from '../../queries'\nimport {getMessages} from '../../generated/getMessages'\n\nimport {  Input, InputGroup, InputRightElement, VStack, Text, chakra} from '@chakra-ui/react'\nimport { useMessageDispatch, useMessageState } from '../../context/message'\nimport Message from './Message'\nimport { useFormik } from 'formik';\nimport {IoSend} from 'react-icons/io5'\nimport classNames from 'classnames'\n\n\nfunction Messages(): ReactElement {\n\n    type User = { username: string, messages: getMessages, selected: boolean}\n    type Message = {\n        uuid: string,\n        from: string,\n        to: string,\n        content: string,\n        createdAt: string\n        reactions: any\n    }\n    \n    const state: any = useMessageState()\n    const dispatch = useMessageDispatch()\n    const selectedUser = state?.users?.find((u: User) => u.selected === true)\n    const messages = selectedUser?.messages\n\n    const [ getMessages, { loading: messagesLoading, data: messagesData }] = useLazyQuery(GET_MESSAGES)\n    const [sendMessage] = useMutation(SEND_MESSAGE, { onError: (err) => console.log(err) })\n\n\n    useEffect(() => {\n        if (selectedUser && !selectedUser.messages) {\n          getMessages({ variables: { from: selectedUser.username } })\n        }\n      }, [selectedUser])\n\n    useEffect(() => {\n        if(messagesData){\n            dispatch({\n                type: 'SET_USER_MESSAGES',\n                payload: {\n                  username: selectedUser?.username,\n                  messages: messagesData.getMessages,\n                },\n              })\n            }\n    }, [messagesData])\n\n    const formik = useFormik({\n      initialValues: {\n        messageContent: '',\n      },\n      onSubmit: async ({messageContent}, {resetForm}) => {\n        if (messageContent.trim() === '' || !selectedUser) return\n        await sendMessage({ variables: { to: selectedUser?.username, content: messageContent } })\n        resetForm()\n      },\n    });\n\n\n      let selectedChatMarkup, inputMarkup, selectAFriend\n      \n      if (!messages && !messagesLoading) {\n        selectedChatMarkup = <Text fontWeight=\"light\" color=\"gray.500\">Select a friend</Text>\n        selectAFriend = true\n      } else if (messagesLoading) {\n        selectedChatMarkup = <p>Loading..</p>\n      } else if (messages.length > 0) {\n        selectedChatMarkup = messages.map((message: Message) => (\n          <Message message={message} key={message.uuid}/>\n        ))\n      } else if (messages.length === 0) {\n        inputMarkup = <p>You are now connected! send your first message!</p>\n      }\n\n    return (\n      <VStack width=\"70%\" justifyContent=\"flex-start\" bgColor=\"whiteAlpha.900\" >\n        <VStack  overflowY=\"scroll\" width=\"100%\" height=\"90%\" flexDirection=\"column-reverse\">\n            {selectedChatMarkup}\n        </VStack>\n            <chakra.form width=\"100%\" onSubmit={formik.handleSubmit} mt=\"10px\">\n            <InputGroup  mx=\"5\" mb=\"2\" height=\"10%\" width=\"95%\">\n            <InputRightElement children={<IoSend/>} as=\"button\" type=\"submit\" fontSize=\"xl\" />\n\t\t\t\t\t\t<Input \n\t\t\t\t\t\t\t\ttype='text' name='messageContent'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.messageContent}\n\t\t\t\t\t\t\t\tarea-label='messageContent' \n                placeholder={classNames({\n                  'You are now connected! send your first message!': inputMarkup\n                })}\n\t\t\t\t\t\t\t\tbg='gray.100'\n                focusBorderColor=\"none\"\n                borderColor=\"gray.50\"\n                isDisabled={selectAFriend}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InputGroup>\n            </chakra.form>\n        </VStack>\n    )\n}\n\nexport default Messages\n","import React, { ReactElement } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_USERS } from '../../queries'\nimport { useMessageDispatch, useMessageState } from '../../context/message'\nimport {getMessages} from '../../generated/getMessages'\nimport {getUsers_getUsers_latestMessage} from '../../generated/getUsers'\nimport {VStack, Flex, Text, Avatar } from '@chakra-ui/react'\nimport classNames from 'classnames'\n\n\n\nfunction Users(): ReactElement {\n\n    type User = { \n        username: string;\n        createdAt: string;\n        token: string | null;\n        imageUrl: string;\n        messages: getMessages, \n        latestMessage: getUsers_getUsers_latestMessage\n        selected: boolean\n    }\n\n    const dispatch = useMessageDispatch()\n    const state: any = useMessageState()\n    const users = state?.users\n    const selectedUser = users?.find((u: User) => u.selected === true)?.username\n\n    const { loading } = useQuery(GET_USERS, {\n        onError: (err) => console.log(err),\n        onCompleted: (data) =>  dispatch({ type: 'SET_USERS', payload: data.getUsers })\n      })\n\n\n    let usersMarkup\n  if (!users || loading) {\n    usersMarkup = <p>Loading..</p>\n  } else if (users.length === 0) {\n    usersMarkup = <p>No users have joined yet</p>\n  } else if (users.length > 0) {\n    usersMarkup = users.map((user: User) => {\n      const selected = selectedUser === user.username\n\n      return (\n        <Flex\n        width=\"100%\"\n        as=\"button\"\n        key={user.username}\n        p=\"3\"\n        justifyContent=\"flex-start\"\n        _hover={{ bg:  'gray.200' }}\n        onClick={() => dispatch({ type: 'SET_SELECTED_USER', payload: user.username })}\n        bg={classNames({'gray.200': selected})}\n        >\n          <Avatar\n            src={user.imageUrl || 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'}\n            mx=\"3\"\n            size=\"md\"\n          />\n          <VStack alignItems=\"flex-start\" isTruncated >\n            <Text fontSize=\"md\">{user.username}</Text>\n            <Text fontWeight=\"thin\" fontSize=\"sm\" >\n              {user.latestMessage\n                ? user.latestMessage.content\n                : 'You are now connected!'}\n            </Text>\n          </VStack>\n        </Flex>\n      )\n    })\n  }\n  return (\n    <VStack  bgColor=\"gray.100\" width=\"30%\" overflowY=\"scroll\" >\n      {usersMarkup}\n    </VStack>\n  )\n}\n\n\n\nexport default Users\n","\nimport React, {useEffect} from 'react'\nimport { useSubscription } from '@apollo/client'\nimport {Flex } from '@chakra-ui/react'\nimport Messages from './Messages'\nimport Users from './Users'\nimport { useAuthState } from '../../context/auth'\nimport { useMessageDispatch } from '../../context/message'\nimport { NEW_MESSAGE, NEW_REACTION } from '../../queries'\n\nexport default function Home() {\n\n  const messageDispatch = useMessageDispatch()\n  const state: any = useAuthState()\n  const user = state.user\n\n  const { data: messageData, error: messageError } = useSubscription(NEW_MESSAGE )\n  const { data: reactionData, error: reactionError } = useSubscription(NEW_REACTION)\n\n\n  useEffect(() => {\n    if (messageError) console.log(messageError)\n\n    if (messageData) {\n      const message = messageData.newMessage\n      const otherUser = user.username === message.to ? message.from : message.to\n\n      messageDispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          username: otherUser,\n          message,\n        },\n      })\n    }\n  }, [messageError, messageData])\n\n  useEffect(() => {\n    if (reactionError) console.log(reactionError)\n\n    if(reactionData){\n      const reaction = reactionData.newReaction\n      const otherUser = user.username === reaction.message.to ? reaction.message.from : reaction.message.to\n      messageDispatch({\n        type: 'ADD_REACTION',\n        payload: {\n          username: otherUser,\n          reaction,\n        },\n      })\n    }\n  }, [reactionError, reactionData])\n\n  return (\n    <Flex  m=\"24\"  bg=\"white.100\" height=\"lg\" >\n      <Users />\n      <Messages />\n    </Flex>\n  )\n}","import React, {useState} from 'react'\nimport { useMutation } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\nimport { BiUserCircle, BiImageAdd } from 'react-icons/bi'\nimport {FcLock} from 'react-icons/fc'\nimport {SiMinutemailer} from 'react-icons/si'\n\nimport { REGISTER_USER } from '../queries'\nimport {useFormik} from 'formik'\nimport {\n\tInput,\n\tStack,\n\tInputGroup,\n\tInputLeftElement,\n\tButton,\n\tFormControl,\n\tText,\n  FormLabel,\n  VStack,\n  Image,\n  useToast\n} from '@chakra-ui/react';\nimport {register, registerVariables} from '../generated/register'\n\n\nconst Register = () => {\n\n    interface Values{\n        email: string,\n        username: string,\n        password: string,\n        confirmPassword: string,\n        imageUrl: string\n    }\n\n  const [errors, setErrors] = useState<Values>()\n  const history = useHistory()\n  const toast = useToast()\n\n    const [registerUser, { loading }] = useMutation<register, registerVariables>(REGISTER_USER, {\n        update: (_, __) => {  history.push('/login') \n        toast({\n          title: \"Account created.\",\n          description: \"We've created your account for you. Login and start chatting\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n        })\n      },\n        onError: (err: any) => {\n          setErrors(err.graphQLErrors[0].extensions.errors)\n          toast({\n            title: \"Bad inputs\",\n            position: \"bottom-right\",\n            description: \"Check your credentials and try again\",\n            status: \"error\",\n            duration: 3000,\n            isClosable: true,\n            })\n        },\n    })\n\n    const formik = useFormik<Values>({\n        initialValues: {\n        email: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n        imageUrl: ''\n        },\n        onSubmit: async ({username, password, email, confirmPassword, imageUrl}, {resetForm}) => {\n        \n        try {\n            await registerUser({variables: {email, username, password, confirmPassword, imageUrl}})\n            resetForm()\n        } catch (err) {\n            console.log({error: err})\n        }\n        },\n    })\n\n     return (\n      <VStack spacing=\"5\" p=\"10\" pt=\"5\" margin=\"20\">\n        <form onSubmit={formik.handleSubmit}>\n        <Stack spacing={3} bg=\"orange.100\"\n        w='350px'\n        p={5}\n        boxShadow='m'\n        rounded='lg'>\n          \t\t\t\t\t<Image src=\"LountWithText.png\" mx='auto' mt={5} mb={5} width=\"30%\" />\n\n          <FormControl isRequired >\n            <InputGroup>\n              <InputLeftElement children={<BiUserCircle/>} />\n              <Input \n                type='text' name='username' \n                placeholder='username' \n                area-label='username' \n                onChange={formik.handleChange} \n                value={formik.values.username}\n                bg='white'\n                borderColor={errors?.username ? 'red.400': 'whiteAlpha.200'}\n                />\n            </InputGroup>\n            {errors?.username && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.username}</FormLabel>}\n          </FormControl>\n          <FormControl isRequired>\n                <InputGroup>\n                    <InputLeftElement children={<SiMinutemailer />} />\n                    <Input\n                    type='text'\n                    name='email'\n                    placeholder='Email'\n                    aria-label='Email'\n                    onChange={formik.handleChange} \n                    value={formik.values.email}\n                    bg='white'\n                    borderColor={errors?.email ? 'red.400': 'whiteAlpha.200'}\n                    />\n                </InputGroup>\n              {errors?.email && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.email}</FormLabel>}\n            </FormControl>\n          <FormControl isRequired >\n            <InputGroup>\n              <InputLeftElement children={<FcLock/>} />\n                <Input\n                  type='password'\n                  placeholder='Password'\n                  aria-label='Password'\n                  name='password'\n                  onChange={formik.handleChange}\n                  value={formik.values.password}\n                  bg='white'\n                  borderColor={errors?.password ? 'red.400': 'whiteAlpha.200'}\n                />\n            </InputGroup>\n            {errors?.password && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.password}</FormLabel>}\n\n          </FormControl>\n        <FormControl isRequired>\n                <InputGroup>\n                    <InputLeftElement children={<FcLock />} />\n                    <Input\n                    type='password'\n                    name='confirmPassword'\n                    placeholder='Confirm Password'\n                    aria-label='confirmPassword'\n                    onChange={formik.handleChange} \n                    value={formik.values.confirmPassword}\n                    bg='white'\n                    borderColor={errors?.confirmPassword ? 'red.400': 'whiteAlpha.200'}\n                    />\n                </InputGroup>\n                {errors?.confirmPassword && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.confirmPassword}</FormLabel>}\n          </FormControl>\n          <FormControl >\n                <InputGroup>\n                    <InputLeftElement children={<BiImageAdd />} />\n                    <Input\n                    type='text'\n                    name='imageUrl'\n                    placeholder='Profile picture URL'\n                    aria-label='imageUrl'\n                    onChange={formik.handleChange} \n                    value={formik.values.imageUrl }\n                    bg='white'\n                    />\n                </InputGroup>\n          </FormControl>\n        \n          <Button\n            type='submit'\n            boxShadow='sm'\n            _hover={{ boxShadow: 'md' }}\n            _active={{ boxShadow: 'lg' }}\n            width=\"100\"\n            disabled={loading}\n            bg=\"orange.200\"\n            color=\"orange.500\"\n            >\n            {loading ? 'loading..' : 'Register'}\n          </Button>\n          <Text fontSize=\"sm\" textAlign=\"center\" color=\"teal.500\">Created by Jarryingnut 👨‍💻</Text>\n        </Stack>\n      </form>\n      </VStack>\n      )\n      \n}\n\nexport default Register\n","import React, { useState }  from 'react'\nimport {useFormik} from 'formik'\nimport { BiUserCircle } from 'react-icons/bi'\nimport {FcLock} from 'react-icons/fc'\nimport { useLazyQuery } from '@apollo/client'\nimport { LOGIN_USER } from '../queries'\nimport { login, loginVariables } from '../generated/login'\nimport { useAuthDispatch } from '../context/auth'\nimport {\n\tVStack, \n\tInput,\n\tStack,\n\tInputGroup,\n\tInputLeftElement,\n\tButton,\n\tFormControl,\n\tText,\n\tFormLabel,\n\tImage,\n\tuseToast\n} from '@chakra-ui/react';\n\nconst Login = () => {\n\n\t\n\tconst dispatch = useAuthDispatch()\n\tconst toast = useToast()\n\n\tconst [errors, setErrors] = useState<loginVariables | undefined>();\n\tconst [loginUser, { loading }] = useLazyQuery<login, loginVariables>(LOGIN_USER, {\n\t\tonError: (err: any) => {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Authentication Error\",\n\t\t\t\tposition: \"bottom-right\",\n\t\t\t\tdescription: \"Check your credentials\",\n\t\t\t\tstatus: \"error\",\n\t\t\t\tduration: 3000,\n\t\t\t\tisClosable: true,\n\t\t\t  })\n\t\t\t  setErrors(err.graphQLErrors[0].extensions.errors)\n\t\t},\n\t\tonCompleted: async ({login}) => {\n\t\t\tawait dispatch({ type: 'LOGIN', payload: login })\n\t\t\twindow.location.href = '/'\n\t\t},\n\t\t\n\t  })\n\n\t  const formik = useFormik<loginVariables>({\n\t\tinitialValues: {\n\t\t  username: '',\n\t\t  password: ''\n\t\t},\n\n\t\tonSubmit: async ({username, password} , {resetForm}) => {\n\t\t  try {\n\t\t\tawait loginUser({variables: {username, password}})\n\t\t\tresetForm()\n\t\t  } catch (err) {\n\t\t\tconsole.error(err)\n\t\t  }\n\t\t},\n\t  });\n    \n     return (\n\t\t<VStack spacing=\"10\" p=\"10\" margin=\"20\">\n\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<Stack spacing={5} bg=\"orange.100\"\n\t\t\t\tw='350px'\n\t\t\t\tp={5}\n\t\t\t\tboxShadow='m'\n\t\t\t\trounded='lg'>\n\n\t\t\t\t\t<FormControl isRequired >\n\t\t\t\t\t<Image src=\"LountWithText.png\" mx='auto' mt={12} mb={10} width=\"30%\" />\n\t\t\t\t\t\t\n\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t<InputLeftElement children={<BiUserCircle/>} />\n\t\t\t\t\t\t\t<Input \n\t\t\t\t\t\t\t\ttype='text' name='username'\n\t\t\t\t\t\t\t\tplaceholder='Username'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.username}\n\t\t\t\t\t\t\t\tarea-label='username' \n\t\t\t\t\t\t\t\tbg='white'\n\t\t\t\t\t\t\t\tborderColor={errors?.username ? 'red.400': 'whiteAlpha.200'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t{errors?.username && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.username}</FormLabel>}\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<FormControl isRequired >\n\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t<InputLeftElement children={<FcLock/>} />\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\t\t\t\taria-label='Password'\n\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.password}\n\t\t\t\t\t\t\t\tbg='white'\n\t\t\t\t\t\t\t\tborderColor={errors?.password ? 'red.400': 'whiteAlpha.200'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t{errors?.password && <FormLabel color=\"red.400\" fontSize=\"xs\">{errors?.password}</FormLabel>}\n\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tboxShadow='sm'\n\t\t\t\t\t\t_hover={{ boxShadow: 'md' }}\n\t\t\t\t\t\t_active={{ boxShadow: 'lg' }}\n\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\tbg=\"orange.200\"\n\t\t\t\t\t\tcolor=\"orange.500\"\n\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t>\n              \t\t{loading ? 'loading..' : 'Login'}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Text fontSize=\"sm\" textAlign=\"center\" color=\"teal.400\">Created by Jarryingnut 👨‍💻 </Text>\n\t\t\t\t</Stack>\n\t\t\t</form>\n\t\t\t</VStack>\n\t  )\n}\n\nexport default Login","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {Flex, Box, Text, useToast, Image, Button, Spacer} from '@chakra-ui/react'\nimport { useAuthDispatch, useAuthState } from './context/auth'\n\n\nconst Navbar = () => {   \n\n    const dispatch = useAuthDispatch()\n    const state: any = useAuthState()\n    const toast =  useToast()\n\n\n    const  logout = async () => {\n      await dispatch({ type: 'LOGOUT' }) \n     // window.location.href = '/login'\n      toast({\n        title: \"See you again!\",\n        description: \"You have logged out successfully\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      })\n    }\n    \nif(!state?.user)\n{\n        return (\n            <Flex  align=\"center\" px=\"40\"  bg=\"whiteAlpha.800\" py=\"1.5\" color=\"gray.600\">\n                <Box px=\"2\">\n                    <Image w='30px' src='/lountchat.png' alt='Logo' />\n                </Box>\n                <Box px=\"2\"> \n                <Text size=\"sm\" fontWeight=\"semibold\" _hover={{ color: 'teal.400' }}><NavLink to=\"/login\" >Login</NavLink></Text>\n                </Box>\n                <Box px=\"2\"> \n                <Text size=\"sm\" fontWeight=\"semibold\" _hover={{ color: 'teal.400' }}><NavLink to=\"/register\">Register</NavLink></Text>\n                </Box>\n            \n            </Flex>\n\n        )\n} else  {\n    \n        return (\n            <Flex  align=\"center\" px=\"40\"  bg=\"gray.200\" py=\"0.5\" color=\"gray.600\" >\n            <Box px=\"2\">\n                    <Image w='30px' src='/lountchat.png' alt='Logo' />\n            </Box>\n            <Spacer />\n\n            <Flex  alignItems=\"center\" >\n                    \n                    <Text size=\"sm\" fontWeight=\"semibold\" mr=\"5\">{`${state?.user?.username} is logged in `}</Text>\n                    <Button   _hover={{ color: 'teal.400' }} onClick={logout}  variant=\"outline\" borderRadius=\"sm\">Logout</Button>\n            </Flex>\n            \n        </Flex>\n        )\n    }\n}\n\n\nexport default Navbar\n\n\n\n","import { extendTheme } from \"@chakra-ui/react\"\n\n\n// const IconButton = {\n//   baseStyle: {\n//     width: \"2px\"\n//   }\n// }\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      // styles for the `body`\n      body: {\n        bgGradient: \"linear(to-r, #74ebd5, #ACB6E5)\",\n      },\n      \n    },\n  },\n\n  \n})\n\nexport default theme","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { useAuthState } from '../context/auth'\n\nexport default function DynamicRoute(props: any) {\n  const { user }: any = useAuthState()\n  console.log('dynamic', user)\n\n  if (props.authenticated && !user) {\n    return <Redirect to=\"/login\" />\n  } else if (props.guest && user) {\n    return <Redirect to=\"/\" />\n  } else {\n    return <Route component={props.component} {...props} />\n  }\n}","import React from 'react'\nimport { BrowserRouter, Switch } from 'react-router-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport ApolloProvider from './ApolloProvider'\n\n\nimport Home from './pages/home/Home'\nimport Register from './pages/Register'\nimport Login from './pages/Login'\nimport Navbar from './Navbar'\n\n\nimport { AuthProvider } from './context/auth'\nimport  MessageProvider  from './context/message'\nimport theme from './theme'\n\nimport DynamicRoute from './util/DynamicRoute'\n\n\nfunction App(): JSX.Element {\n  return (\n    <ApolloProvider>\n    <ChakraProvider theme={theme}>\n    <MessageProvider> \n    <AuthProvider> \n      <BrowserRouter>\n      <Navbar/>\n          <Switch>\n              <DynamicRoute exact path=\"/\" component={Home} authenticated/>\n              <DynamicRoute path=\"/register\" component={Register} guest/>\n              <DynamicRoute path=\"/login\" component={Login} guest/>\n          </Switch>\n      </BrowserRouter>\n      </AuthProvider>\n      </MessageProvider> \n    </ChakraProvider>\n    </ApolloProvider>\n  )\n}\n\n\n//npx apollo client:codegen --target typescript --endpoint=http://localhost:4000 --outputFlat --includes \"{src/pages)/**\" --excludes \"src/generated\" src/generated\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}